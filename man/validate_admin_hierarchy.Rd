% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_data.R
\name{validate_admin_hierarchy}
\alias{validate_admin_hierarchy}
\title{Validate Administrative Hierarchy}
\usage{
validate_admin_hierarchy(
  data,
  column_combos,
  id_columns = NULL,
  return_non_unique = FALSE
)
}
\arguments{
\item{data}{A data frame containing the administrative hierarchy data.}

\item{column_combos}{A list of character vectors, each representing a set of
hierarchical columns to check.}

\item{id_columns}{A character vector specifying the column(s) containing
unique identifiers. Default is NULL.}

\item{return_non_unique}{A logical value indicating whether to return
non-unique IDs. Default is FALSE.}
}
\value{
If return_non_unique is FALSE (default), returns a data frame
containing the results of hierarchical integrity checks. If
return_non_unique is TRUE and id_columns is provided, returns a
vector of non-unique IDs.
}
\description{
This function performs validation checks on administrative hierarchy data,
focusing on hierarchical integrity and uniqueness of combinations.
}
\examples{
# Sample data
sample_data <- data.frame(
  Id = c(1, 2, 3, 4, 5, 6, 7),
  Admin0GUID = c("A1", "A1", "A2", "A2", "A1", "A2", "A1"),
  Admin0Name = c(
    "Country1", "Country1", "Country2", "Country2",
    "Country1", "Country2", "Country1"
  ),
  Admin1GUID = c("B1", "B2", "B3", "B3", "B1", "B3", "B2"),
  Admin1Name = c(
    "Province1", "Province2", "Province3", "Province3",
    "Province1", "Province3", "Province2"
  ),
  Admin2GUID = c("C1", "C2", "C3", "C4", "C1", "C3", "C2"),
  Admin2Name = c(
    "District1", "District2", "District3", "District4",
    "District1", "District3", "District2"
  )
)

# Check hierarchical integrity
result1 <- validate_admin_hierarchy(
  data = sample_data,
  column_combos = list(
    c("Admin0GUID", "Admin1GUID", "Admin2GUID"),
    c("Admin0Name", "Admin1Name", "Admin2Name")
  )
)
print(result1)

# Get non-unique IDs
result2 <- validate_admin_hierarchy(
  data = sample_data,
  column_combos = list(
    c("Admin0GUID", "Admin1GUID", "Admin2GUID"),
    c("Admin0Name", "Admin1Name", "Admin2Name")
  ),
  id_columns = "Id",
  return_non_unique = TRUE
)
print(result2)

}
