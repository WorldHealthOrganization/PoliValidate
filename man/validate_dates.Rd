% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prep_dates.R
\name{validate_dates}
\alias{validate_dates}
\title{Validate Date Columns}
\usage{
validate_dates(
  data,
  date_col1,
  date_col2,
  tests = c("missing", "non_date", "sensible", "leap_year", "format", "similarity",
    "order"),
  min_year = 2000
)
}
\arguments{
\item{data}{A data frame containing the date columns.}

\item{date_col1}{The name of the first date column.}

\item{date_col2}{The name of the second date column.}

\item{tests}{A character vector specifying which tests to run. Default is
c("missing", "non_date", "sensible", "leap_year", "format",
"similarity", "order").}

\item{min_year}{The minimum year to consider as valid. Default is 2000.}
}
\value{
The modified data frame with additional columns indicating issues
found during the checks.
}
\description{
This function checks and validates two date columns in a data frame. It
performs various checks for missing dates, non-date values, sensible dates,
leap year validity, date formatting, similarity in date formatting, and
if the first date is before the second date.
}
\examples{
data <- data.frame(
  country = c(
    "Rwanda", "Burundi", "Ethiopia", "Zambia", "Zambia",
    "Chad", "Niger", "Angola"
  ),
  date1 = c(
    "2024-06-15", "2024-07-20", NA, "1999-12-31", "2025-08-22",
    "2020/23/10", "2020-02-29", "2024-02-29"
  ),
  date2 = c(
    "2023-06-15", "2024-07-20", "2022-05-10", "2019-02-29",
    "2026-09-23", "2020/23/10", "2020-02-29", "2022-02-29"
  )
)

res <- validate_dates(data, "date1", "date2")

# Check for countries where there is a non-date issue in the date1 column
res |>
  dplyr::filter(date1_non_date == TRUE) |>
  dplyr::count(country)

# Check for countries where there is an invalid leap year issue in date1
res |>
  dplyr::filter(date1_leap_issue == TRUE) |>
  dplyr::count(country)

# Check for countries where there is improper formatting of date1 col
res |>
  dplyr::filter(date1_format_issue == TRUE) |>
  dplyr::count(country)

# Check for countries where date1 is after date2
res |>
  dplyr::filter(date1_invalid_order == TRUE) |>
  dplyr::count(country)

}
