% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_data.R
\name{check_data}
\alias{check_data}
\title{Check and validate data across multiple dimensions}
\usage{
check_data(
  data,
  id_col,
  geo_name_cols,
  geo_id_cols,
  date_cols,
  date_pair_cols = NULL,
  lat_long_cols,
  shapefile_data = NULL,
  shapefile_join_key = NULL,
  correct_lat_col = NULL,
  correct_lon_col = NULL,
  shapefile_name_cols = NULL,
  shapefile_id_cols = NULL,
  run_missing_check = TRUE,
  run_date_check = TRUE,
  run_geo_hierarchy_check = TRUE,
  run_geo_mismatch_check = TRUE,
  run_coordinate_checks = TRUE,
  run_detections = TRUE,
  coordinate_checks = c("flip", "on_water", "missing", "out_of_bounds", "precision",
    "null_coords", "parse")
)
}
\arguments{
\item{data}{A data frame containing the dataset to be checked.}

\item{id_col}{Character string specifying the name of the ID column.}

\item{geo_name_cols}{Character vector of column names containing geographic
names.}

\item{geo_id_cols}{Character vector of column names containing geographic
IDs.}

\item{date_cols}{Character vector of column names containing dates.}

\item{date_pair_cols}{List of character vectors, each containing a pair of
date column names to be compared.}

\item{lat_long_cols}{Character vector of two column names containing
latitude and longitude.}

\item{shapefile_data}{Optional data frame containing shapefile data for
geographic comparisons.}

\item{shapefile_join_key}{Optional character string specifying the join key
for the shapefile data.}

\item{correct_lat_col}{Optional character string specifying the column name
for correct latitude in shapefile data.}

\item{correct_lon_col}{Optional character string specifying the column name
for correct longitude in shapefile data.}

\item{shapefile_name_cols}{Optional character vector of column names in
shapefile data containing geographic names.}

\item{shapefile_id_cols}{Optional character vector of column names in
shapefile data containing geographic IDs.}

\item{run_missing_check}{Logical, whether to run missing data check.}

\item{run_date_check}{Logical, whether to run date validation checks.}

\item{run_geo_hierarchy_check}{Logical, whether to run geographic hierarchy
check.}

\item{run_geo_mismatch_check}{Logical, whether to run geographic mismatch
check.}

\item{run_coordinate_checks}{Logical, whether to run coordinate checks.}

\item{run_detections}{Logical, whether to run virus detections checks.}

\item{coordinate_checks}{Character vector specifying which coordinate checks
to run.}
}
\value{
A list containing the following elements:
\item{missing_data}{Data frame summarizing missing data and data types for
all columns}
\item{date_results}{Data frame summarizing date validation results}
\item{date_results_pairs}{Data frame summarizing date pair validation
results}
\item{geo_hierarchy}{List containing results of geographic hierarchy
validation}
\item{geo_mismatches}{Data frame summarizing mismatches between data and
shapefile}
\item{coordinate_checks}{Data frame summarizing coordinate validation
results}
}
\description{
This function performs comprehensive checks on a dataset, including missing
data, data types, date validations, geographic hierarchy, geo-name and ID
mismatches, and coordinate checks.
}
\examples{
# Basic usage:
# results <- check_data(
#   data = my_data,
#   id_col = "ID",
#   geo_name_cols = c("country", "region", "district"),
#   geo_id_cols = c("country_id", "region_id", "district_id"),
#   date_cols = c("start_date", "end_date"),
#   lat_long_cols = c("latitude", "longitude")
# )
#
# With shapefile data and date pairs:
# results_with_shapefile <- check_data(
#   data = my_data,
#   id_col = "ID",
#   geo_name_cols = c("country", "region", "district"),
#   geo_id_cols = c("country_id", "region_id", "district_id"),
#   date_cols = c("start_date", "end_date"),
#   date_pair_cols = list(c("start_date", "end_date")),
#   lat_long_cols = c("latitude", "longitude"),
#   shapefile_data = my_shapefile_data,
#   shapefile_join_key = "district_id",
#   correct_lat_col = "correct_lat",
#   correct_lon_col = "correct_lon",
#   shapefile_name_cols = c("country_name", "region_name", "district_name"),
#   shapefile_id_cols = c("country_code", "region_code", "district_code")
# )

}
