% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prep_dates.R
\name{validate_date}
\alias{validate_date}
\title{Validate Date Column}
\usage{
validate_date(
  data,
  date_col,
  tests = c("missing", "non_date", "sensible", "leap_year", "format"),
  min_year = 2000
)
}
\arguments{
\item{data}{A data frame containing the date column.}

\item{date_col}{The name of the date column.}

\item{tests}{A character vector specifying which tests to run. Default is
c("missing", "non_date", "sensible", "leap_year", "format").}

\item{min_year}{The minimum year to consider as valid. Default is 2000.}
}
\value{
The modified data frame with additional columns indicating issues
found during the checks.
}
\description{
This function checks and validates a date column in a data frame. It
performs various checks for missing dates, non-date values, sensible dates,
leap year validity, and date formatting.
}
\examples{
data <- data.frame(
  country = c(
    "Rwanda", "Burundi", "Ethiopia", "Zambia", "Zambia",
    "Chad", "Niger", "Angola"
  ),
  date = c(
    "2023-06-15", "2024-07-20", NA, "1999-12-31", "2025-08-22",
    "2020/23/10", "2020-02-29", "2019-02-29"
  )
)

# check whether dates column is valid
res <- validate_date(data, "date")

# Check for countries where there is a non-date issue in the date column
res |>
  dplyr::filter(date_non_date == TRUE) |>
  dplyr::count(country)

# Check for countries where there is an invalid leap year issue
res |>
  dplyr::filter(date_leap_issue == TRUE) |>
  dplyr::count(country)

# Check for countries where there is improper formatting of the date
res |>
  dplyr::filter(date_format_issue == TRUE) |>
  dplyr::count(country)

}
