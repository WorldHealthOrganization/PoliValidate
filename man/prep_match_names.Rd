% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prep_match_names.R
\name{prep_match_names}
\alias{prep_match_names}
\title{Match Naming Conventions Between df}
\usage{
prep_match_names(ref_dataframe, target_dataframe, report = TRUE)
}
\arguments{
\item{ref_dataframe}{A dataframe with reference variable names.}

\item{target_dataframe}{A dataframe to modify variable names to match
\code{ref_dataframe}.}

\item{report}{Boolean value indicating if processing report should be printed
or not. Defaults to TRUE}
}
\value{
A modified copy of \code{target_dataframe} with standardized variable
names.
}
\description{
Standardizes variable names between two df by renaming variables in
the target dataframe to match the naming conventions in the reference
dataframe. This function is particularly useful for ensuring seamless
integration and minimizing errors during data merging processes, especially
when dealing with data from different sources that use different naming
conventions (e.g., CamelCase vs snake_case).
}
\examples{
# Define reference and target df with different naming conventions
ref_dataframe <- tibble::tibble(
  CountryName = c("Cameroon", "Nigeria", "Tchad", "Niger"),
  NameOfCapital = c("Yaounde", "Abuja", "Ndjamena", "Niamey")
)

target_dataframe <- tibble::tibble(
  countryname = c("South Sudan", "Kenya", "Ethiopia", "CAR"),
  nameofcapital = c("Juba", "Nairobi", "Addis Ababa", "Bangui")
)

# Before matching: expect FALSE
all(names(ref_dataframe) == names(target_dataframe))

# Apply the name matching function
target_dataframe <- prep_match_names(ref_dataframe, target_dataframe)

# After matching: expect TRUE
all(names(ref_dataframe) == names(target_dataframe))
}
